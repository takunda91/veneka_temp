using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Web.UI;
using indigoCardIssuingWeb.CCO;
using indigoCardIssuingWeb.service;
using indigoCardIssuingWeb.utility;
using indigoCardIssuingWeb.CardIssuanceService;
using Common.Logging;
using System.Threading;
using System.Globalization;
using indigoCardIssuingWeb.SearchParameters;
using System.Configuration;

namespace indigoCardIssuingWeb.webpages.dist
{
    public partial class DistBatchView : BasePage
    {
        private enum DistPageLayout
        {
            READ,
            REJECT_CONFIRM,
            STATUS_CONFIRM,
            SPECIAL_CONFIRM,
            CANCEL
        }

        private readonly UserRole[] userRolesForPage = new UserRole[] { UserRole.CENTER_MANAGER,
                                                                        UserRole.CENTER_OPERATOR,
                                                                        UserRole.BRANCH_CUSTODIAN,
                                                                        UserRole.CMS_OPERATOR,
                                                                        UserRole.CARD_PRODUCTION,
                                                                        UserRole.PIN_PRINTER_OPERATOR,
                                                                        UserRole.AUDITOR};

        private static readonly ILog log = LogManager.GetLogger(typeof(DistBatchView));
        private readonly BatchManagementService _batchService = new BatchManagementService();
        private UserManagementService _userMan = new UserManagementService();
        public bool autogenerateDistBatch = true;
        #region LOAD PAGE
        protected new void Page_Load(object sender, EventArgs e)
        {
            base.Page_Load(sender, e);

            if (!IsPostBack)
            {
                LoadPageData(null);
                CurrentDisPageLayout = DistPageLayout.READ;
                
            }
        }

        /// <summary>
        /// Use this method to initially load the page.
        /// </summary>
        /// <param name="distBatchId"></param>
        private void LoadPageData(long? distBatchId)
        {
            try
            {
                if (SessionWrapper.DistBatchSearchParams != null)
                {
                    SearchParam = SessionWrapper.DistBatchSearchParams;
                    SessionWrapper.DistBatchSearchParams = null;
                }
                long? Dist_BatchId = null;
                if (SessionWrapper.DistBatchId != null)
                {
                    Dist_BatchId = SessionWrapper.DistBatchId;
                    SessionWrapper.DistBatchId = null;
                }
                if (SessionWrapper.CardSearchParams != null && SessionWrapper.CardSearchParams.PreviousSearchParameters != null)
                {
                    SearchParam = (DistBatchSearchParameters)SessionWrapper.CardSearchParams.PreviousSearchParameters;
                    Dist_BatchId = ((CardSearchParameters)SessionWrapper.CardSearchParams).DistBatchId;
                    SessionWrapper.CardSearchParams = null;
                }

                //See if theres anything in the session.
                if (distBatchId == null && Dist_BatchId != null)
                {
                    distBatchId = Dist_BatchId;
                }
                if (Request.QueryString["page"] != null)
                {
                    PreviousPage = Request.QueryString["page"].ToString();
                }
                DistBatchResult distBatch = null;

                if (distBatchId != null)
                {
                    distBatch = PopulatePage(distBatchId.GetValueOrDefault());

                    if (distBatch != null)
                    {
                        SetButtons(distBatch);
                        DistBatchId = distBatch.dist_batch_id;
                        BatchResult = distBatch;
                    }


                }

                if (distBatch == null)
                {
                    this.lblErrorMessage.Text = "No distribution batch to show.";
                }

            }
            catch (Exception ex)
            {
                this.pnlDisable.Visible = false;
                this.pnlButtons.Visible = false;
                log.Error(ex);
                this.lblErrorMessage.Text = Resources.DefaultExceptions.UnknownExceptionMessage;
                if (log.IsDebugEnabled || log.IsTraceEnabled)
                {
                    this.lblErrorMessage.Text = ex.ToString();
                }
            }
        }

        /// <summary>
        /// Use this method to populate the page and set the pages buttons according to batch status and user role. 
        /// This method does a call to the DB to get latest batch information if the batch id is not null.
        /// </summary>
        /// <param name="distBatchId"></param>
        /// <returns></returns>
        private DistBatchResult PopulatePage(long? distBatchId)
        {
            DistBatchResult distBatch = null;

            if (distBatchId != null)
            {
                distBatch = _batchService.GetDistBatch(distBatchId.Value);
            }

            return PopulatePage(distBatch);
        }

        /// <summary>
        /// Use this method to populate the page and set the pages buttons according to batch status and user role.         
        /// </summary>
        /// <param name="distBatch"></param>
        /// <returns></returns>
        private DistBatchResult PopulatePage(DistBatchResult distBatch)
        {
            SetButtons(distBatch);
            BatchResult = distBatch;

            if (distBatch != null)
            {
                this.tbCreatedBy.Text = distBatch.username;
                this.tbIssueMethod.Text = distBatch.card_issue_method_name;
                this.tbBatchCreatedDate.Text =Convert.ToDateTime(distBatch.date_created).ToString(DATETIME_FORMAT);
                this.tbBatchReference.Text = distBatch.dist_batch_reference;
                this.tbBatchStatus.Text = distBatch.dist_batch_status_name;
                this.tbNumberOfCards.Text = distBatch.no_cards.ToString();
                this.tbStatusNote.Text = distBatch.status_notes;
                this.tbIssuerName.Text = base.FormatNameAndCode(distBatch.issuer_name, distBatch.issuer_code);
                this.tbBranchName.Text = base.FormatNameAndCode(distBatch.branch_name, distBatch.branch_code);
                this.tbProductType.Text = distBatch.product_name;

                if (distBatch.dist_batch_type_id == 0)
                    this.lbldistBatchDetails.Text = Resources.CommonLabels.ProductionBatchView;
                else
                    this.lbldistBatchDetails.Text = Resources.CommonLabels.DistributionBatchView;
            }
            else
            {
                this.lblInfoMessage.Text = "Distribution batch not found. Please try again.";
            }

            return distBatch;
        }

        /// <summary>
        /// This method sets the pages buttons according to the batches status and the users role.
        /// </summary>
        /// <param name="loadBatch"></param>
        private void SetButtons(DistBatchResult distBatch)
        {
            //disable all buttons by default.            
            this.btnStatus.Visible = false;
            this.btnOther.Visible = false;
            this.btnReject.Visible = false;
            this.btnCanel.Visible = false;
            this.btnConfirm.Visible = false;
            this.tbStatusNote.Enabled = this.btnConfirm.Enabled = false;
            this.btnDisplayCards.Visible = false;
            this.btnPDFReport.Visible = true;

            //If a load batch has been passed set the buttons accordingly.
            if (distBatch != null)
            {
                bool canUpdate;
                bool canRead;
                bool canCreate;

                //distBatch.flow_dist_batch_statuses_id;
                //distBatch.flow_dist_batch_type_id;
                if (distBatch.user_role_id != null &&
                    distBatch.flow_dist_batch_statuses_id != null &&
                    PageUtility.ValidateUserPageRole(User.Identity.Name, (UserRole)distBatch.user_role_id, distBatch.issuer_id, out canRead, out canUpdate, out canCreate))
                {
                    this.btnDisplayCards.Visible = true;

                    if (canUpdate)
                    {
                        this.btnStatus.Text = GetGlobalResourceObject("DistBatchStatusButtons", String.Format("Btn{0}", distBatch.flow_dist_batch_statuses_id)).ToString();
                        this.btnStatus.Visible = true;

                        //Special Cases
                        if (distBatch.dist_batch_statuses_id == 10 ||
                            distBatch.dist_batch_statuses_id == 12 ||
                            distBatch.dist_batch_statuses_id == 17)
                        {
                            this.btnOther.Text = GetGlobalResourceObject("DistBatchStatusButtons", String.Format("Btn{0}", distBatch.dist_batch_statuses_id)).ToString();
                            this.btnOther.Visible = true;
                        }

                        if (distBatch.reject_dist_batch_statuses_id != null)
                        {
                            this.btnReject.Text = GetGlobalResourceObject("DistBatchStatusButtons", String.Format("Btn{0}", distBatch.reject_dist_batch_statuses_id)).ToString();
                            this.btnReject.Visible = true;
                        }
                    }
                }

                if (PageUtility.ValidateUserPageRole(User.Identity.Name, UserRole.CENTER_MANAGER, distBatch.issuer_id, out canRead, out canUpdate, out canCreate))
                {
                    if (distBatch.dist_batch_statuses_id == 2)
                    {
                        this.btnStatus.Text = GetGlobalResourceObject("DistBatchStatusButtons", String.Format("Btn{0}", distBatch.flow_dist_batch_statuses_id)).ToString();
                        this.btnStatus.Visible = true;
                        btnCanel.Visible = true;
                    }
                }
            }
        }

        /// <summary>
        /// Use this method to set page controls bassed on the page layout.
        /// </summary>
        /// <param name="disPageLayout"></param>
        private void UpdatePageLayout(DistPageLayout? disPageLayout)
        {
            if (disPageLayout == null)
            {
                disPageLayout = CurrentDisPageLayout.GetValueOrDefault();
            }

            switch (disPageLayout)
            {
                case DistPageLayout.READ:
                    this.tbStatusNote.Enabled = false;
                    PopulatePage(DistBatchId);
                    break;
                case DistPageLayout.STATUS_CONFIRM:
                    this.lblInfoMessage.Text = GetGlobalResourceObject("CommonInfoMessages", "ReviewCommitMessage").ToString();
                    RejectConfirmation();
                    break;
                case DistPageLayout.SPECIAL_CONFIRM:
                    this.lblInfoMessage.Text = GetGlobalResourceObject("CommonInfoMessages", "ReviewCommitMessage").ToString();
                    RejectConfirmation();
                    break;
                case DistPageLayout.REJECT_CONFIRM:
                    this.lblInfoMessage.Text = GetGlobalResourceObject("CommonInfoMessages", "ReviewCommitMessage").ToString();
                    RejectConfirmation();
                    break;
                case DistPageLayout.CANCEL:
                    this.lblInfoMessage.Text = GetGlobalResourceObject("CommonInfoMessages", "ReviewCommitMessage").ToString();
                    RejectConfirmation();
                    break;
                default:
                    break;

            }

            CurrentDisPageLayout = disPageLayout;
        }

        private void RejectConfirmation()
        {
            this.tbStatusNote.Enabled = true;
            this.tbStatusNote.Text = "";

            this.btnPDFReport.Visible = false;
            this.btnStatus.Visible = false;
            this.btnOther.Visible = false;
            this.btnReject.Visible = false;
            this.btnCanel.Visible = false;
            this.btnDisplayCards.Visible = false;

            this.btnConfirm.Visible = true;
            this.tbStatusNote.Enabled = this.btnConfirm.Enabled = true;
        }

        /// <summary>
        /// Returns true if notes text box has been populated.
        /// </summary>
        /// <returns></returns>
        private Boolean isNotesPopulated()
        {
            if (String.IsNullOrWhiteSpace(this.tbStatusNote.Text))
            {
                //this.lblErrorMessage.Text = GetLocalResourceObject("ValidationRejectReason").ToString();
                this.lblErrorMessage.Text = GetGlobalResourceObject("DefaultExceptions", "ValidationRejectReason").ToString();
                return false;
            }

            return true;
        }

        #endregion

        #region Page Events

        protected void btnBack_OnClick(object sender, EventArgs e)
        {
            this.lblInfoMessage.Text = "";
            this.lblErrorMessage.Text = "";

            DistPageLayout pageLayout = DistPageLayout.READ;

            if (CurrentDisPageLayout != null)
            {
                pageLayout = CurrentDisPageLayout.GetValueOrDefault();
            }

            if (pageLayout == DistPageLayout.READ)
            {
                if (SearchParam != null)
                    SessionWrapper.DistBatchSearchParams = SearchParam;
                if (string.IsNullOrEmpty(PreviousPage))
                {
                    Server.Transfer("~\\webpages\\dist\\DistBatchList.aspx");
                }
                else if (PreviousPage.ToUpper().StartsWith("DBC"))
                {
                    string dir = PreviousPage.Substring(3);
                    Server.Transfer("~\\webpages\\dist\\DistBatchCreate.aspx?direction=" + dir);
                }
                else
                {
                    Server.Transfer("~\\webpages\\card\\CardStockOrdering.aspx");
                }
            }
            else
            {
                UpdatePageLayout(DistPageLayout.READ);
            }
        }

        protected void btnDisplayCards_Click(object sender, EventArgs e)
        {
            this.lblInfoMessage.Text = "";
            this.lblErrorMessage.Text = "";

            try
            {
                //SessionWrapper.BackURL = "~\\webpages\\card\\";
                //SessionWrapper.DistBatchId = BatchResult.dist_batch_id;
                SessionWrapper.CardSearchParams = new CardSearchParameters
                {
                    DistBatchId = BatchResult.dist_batch_id,
                    //BatchReference = BatchResult.dist_batch_reference,
                    IssuerId = BatchResult.issuer_id,
                    RowsPerPage = StaticDataContainer.ROWS_PER_PAGE,
                    PageIndex = 1,
                    PreviousSearchParameters = SearchParam,
                };
                //SessionWrapper.DistBatchSearchParams = SearchParam;
                //Response.Redirect("~\\webpages\\card\\CardList.aspx");

                Server.Transfer("~\\webpages\\card\\CardList.aspx", false);
            }
            catch (Exception ex)
            {
                log.Error(ex);
                this.lblErrorMessage.Text = Resources.DefaultExceptions.UnknownExceptionMessage;
                if (log.IsDebugEnabled || log.IsTraceEnabled)
                {
                    this.lblErrorMessage.Text = ex.ToString();
                }
            }
        }

        protected void btnStatus_Click(object sender, EventArgs e)
        {
            this.lblInfoMessage.Text = "";
            this.lblErrorMessage.Text = "";

            try
            {
                UpdatePageLayout(DistPageLayout.STATUS_CONFIRM);
            }
            catch (Exception ex)
            {
                log.Error(ex);
                this.lblErrorMessage.Text = Resources.DefaultExceptions.UnknownExceptionMessage;
                if (log.IsDebugEnabled || log.IsTraceEnabled)
                {
                    this.lblErrorMessage.Text = ex.ToString();
                }
            }
        }

        protected void btnOther_Click(object sender, EventArgs e)
        {
            this.lblInfoMessage.Text = "";
            this.lblErrorMessage.Text = "";

            try
            {
                UpdatePageLayout(DistPageLayout.SPECIAL_CONFIRM);
            }
            catch (Exception ex)
            {
                log.Error(ex);
                this.lblErrorMessage.Text = Resources.DefaultExceptions.UnknownExceptionMessage;
                if (log.IsDebugEnabled || log.IsTraceEnabled)
                {
                    this.lblErrorMessage.Text = ex.ToString();
                }
            }
        }

        protected void btnReject_Click(object sender, EventArgs e)
        {
            this.lblInfoMessage.Text = "";
            this.lblErrorMessage.Text = "";

            try
            {
                UpdatePageLayout(DistPageLayout.REJECT_CONFIRM);
            }
            catch (Exception ex)
            {
                log.Error(ex);
                this.lblErrorMessage.Text = Resources.DefaultExceptions.UnknownExceptionMessage;
                if (log.IsDebugEnabled || log.IsTraceEnabled)
                {
                    this.lblErrorMessage.Text = ex.ToString();
                }
            }
        }

        protected void btnConfirm_Click(object sender, EventArgs e)
        {
            this.lblInfoMessage.Text = "";
            this.lblErrorMessage.Text = "";

            try
            {
                DistPageLayout disPageLayout = DistPageLayout.READ;
                if (ConfigurationManager.AppSettings["AutoCreatedistbatch"] != null)
                {
                    autogenerateDistBatch = bool.Parse(ConfigurationManager.AppSettings["AutoCreatedistbatch"].ToString());
                }
                if (CurrentDisPageLayout != null)
                {
                    disPageLayout = CurrentDisPageLayout.GetValueOrDefault();
                }

                string responseMessage = String.Empty;
                DistBatchResult distBatch = new DistBatchResult();

                if (DistBatchId != null)
                {
                    switch (disPageLayout)
                    {
                        case DistPageLayout.READ:
                            break;
                        case DistPageLayout.STATUS_CONFIRM:
                            if (_batchService.DistBatchChangeStatus(DistBatchId.Value, BatchResult.dist_batch_statuses_id, BatchResult.flow_dist_batch_statuses_id.Value, this.tbStatusNote.Text.Trim(), autogenerateDistBatch,out distBatch, out responseMessage))
                                this.lblInfoMessage.Text = responseMessage;
                            else
                                this.lblErrorMessage.Text = responseMessage;
                            break;
                        case DistPageLayout.SPECIAL_CONFIRM:
                            if (_batchService.DistBatchChangeStatus(DistBatchId.Value, BatchResult.dist_batch_statuses_id, BatchResult.dist_batch_statuses_id, this.tbStatusNote.Text.Trim(),autogenerateDistBatch, out distBatch, out responseMessage))
                                this.lblInfoMessage.Text = responseMessage;
                            else
                                this.lblErrorMessage.Text = responseMessage;
                            break;
                        case DistPageLayout.REJECT_CONFIRM:
                            if (isNotesPopulated())
                                if (BatchResult.dist_batch_statuses_id == 0 &&
                                        BatchResult.card_issue_method_id == 0 &&
                                        BatchResult.dist_batch_type_id == 0)
                                {
                                    SessionWrapper.DistBatchId = DistBatchId;
                                    SessionWrapper.RejectComments = this.tbStatusNote.Text;
                                    Server.Transfer("~\\webpages\\classic\\RejectBatchCards.aspx");
                                }
                                else
                                {
                                    if (_batchService.DistBatchRejectStatus(DistBatchId.Value, BatchResult.reject_dist_batch_statuses_id.Value, this.tbStatusNote.Text.Trim(), out distBatch, out responseMessage))
                                        this.lblInfoMessage.Text = responseMessage;
                                    else
                                        this.lblErrorMessage.Text = responseMessage;
                                }
                            break;
                        case DistPageLayout.CANCEL:
                            if (_batchService.DistBatchCancel(DistBatchId.Value, BatchResult.dist_batch_statuses_id, BatchResult.dist_batch_type_id,BatchResult.card_issue_method_id, this.tbStatusNote.Text.Trim(),  out responseMessage, out distBatch))
                                this.lblInfoMessage.Text = responseMessage;
                            else
                                this.lblErrorMessage.Text = responseMessage;
                            break;
                        default:
                            break;
                    }
                }

                if (distBatch != null && distBatch.dist_batch_id > 0)
                {
                    UpdatePageLayout(DistPageLayout.READ);
                    PopulatePage(distBatch);
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                this.lblErrorMessage.Text = Resources.DefaultExceptions.UnknownExceptionMessage;
                if (log.IsDebugEnabled || log.IsTraceEnabled)
                {
                    this.lblErrorMessage.Text = ex.ToString();
                }
            }
        }

        protected void btnPDFReport_Click(object sender, EventArgs e)
        {
            this.lblInfoMessage.Text = "";
            this.lblErrorMessage.Text = "";

            try
            {
                if (DistBatchId != null)
                {
                    var reportBytes = _batchService.GenerateDistBatchReport(DistBatchId.Value);

                    string reportName = String.Empty;

                    reportName = BatchResult.dist_batch_type_id == 0 ? "Production_Report_" : "Distribution_Report_";
                    reportName += DistBatchId.Value.ToString() + "_" + DateTime.Now.ToString("ddd_dd_MMMM_yyyy") + ".pdf";

                    Response.Clear();
                    Response.ClearHeaders();
                    MemoryStream ms = new MemoryStream(reportBytes);
                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=" + reportName);
                    Response.Buffer = true;
                    ms.WriteTo(Response.OutputStream);
                    Response.Flush();
                    //Response.End();
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                this.lblErrorMessage.Text = Resources.DefaultExceptions.UnknownExceptionMessage;
                if (log.IsDebugEnabled || log.IsTraceEnabled)
                {
                    this.lblErrorMessage.Text = ex.ToString();
                }
            }            
        }

        #endregion

        #region ViewState Variables
        private long? DistBatchId
        {
            get
            {
                if (ViewState["DistBatchId"] == null)
                    return null;
                else
                    return Convert.ToInt64(ViewState["DistBatchId"].ToString());
            }
            set
            {
                ViewState["DistBatchId"] = value;
            }
        }

        private DistBatchResult BatchResult
        {
            get
            {
                if (ViewState["BatchResult"] == null)
                    return null;
                else
                    return (DistBatchResult)ViewState["BatchResult"];
            }
            set
            {
                ViewState["BatchResult"] = value;
            }
        }

        private DistPageLayout? CurrentDisPageLayout
        {
            get
            {
                if (ViewState["CurrentDisPageLayout"] == null)
                    return null;
                else
                    return (DistPageLayout)ViewState["CurrentDisPageLayout"];
            }
            set
            {
                ViewState["CurrentDisPageLayout"] = value;
            }
        }

        private DistBatchSearchParameters SearchParam
        {
            get
            {
                if (ViewState["SearchParam"] == null)
                    return null;
                else
                    return (DistBatchSearchParameters)ViewState["SearchParam"];
            }
            set
            {
                ViewState["SearchParam"] = value;
            }
        }
        private String PreviousPage
        {
            get
            {
                if (ViewState["PreviousPage"] == null)
                    return null;
                else
                    return (String)ViewState["PreviousPage"];
            }
            set
            {
                ViewState["PreviousPage"] = value;
            }
        }
        #endregion

        protected void btnCanel_Click(object sender, EventArgs e)
        {
            this.lblInfoMessage.Text = "";
            this.lblErrorMessage.Text = "";

            try
            {
                UpdatePageLayout(DistPageLayout.CANCEL);
            }
            catch (Exception ex)
            {
                log.Error(ex);
                this.lblErrorMessage.Text = Resources.DefaultExceptions.UnknownExceptionMessage;
                if (log.IsDebugEnabled || log.IsTraceEnabled)
                {
                    this.lblErrorMessage.Text = ex.ToString();
                }
            }
        }
    }
}
