using Org.BouncyCastle.Utilities.Encoders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using Veneka.Indigo.CardManagement.dal;
using Veneka.Indigo.CardManagement.objects;
using Veneka.Indigo.CardManagement.Reports;
using Veneka.Indigo.Common;
using Veneka.Indigo.Common.Language;
using Veneka.Indigo.Common.Models;
using Veneka.Indigo.Integration.ProductPrinting;


namespace Veneka.Indigo.CardManagement
{
    public class PrintBatchManagementService
    {
        private readonly PrintBatchManagementDAL _prinbatchDAL = new PrintBatchManagementDAL();
        private readonly ResponseTranslator _translator = new ResponseTranslator();
        public readonly DistBatchReports _distBatchReports = new DistBatchReports();
        public bool UpdatePrintBatchChangeStatus(long printBatchId, int? printBatchStatusesId, int? newPrintBatchStatusesId, string notes, bool autogenerateDistBatch, int languageId, long auditUserId, string auditWorkstation, out PrintBatchResult printBatchResult, out string responseMessage)
        {
            var resultCode = _prinbatchDAL.UpdatePrintBatchChangeStatus(printBatchId, printBatchStatusesId, newPrintBatchStatusesId, notes, autogenerateDistBatch, languageId, auditUserId, auditWorkstation, out printBatchResult);

            responseMessage = _translator.TranslateResponseCode(resultCode, SystemArea.GENERIC, languageId, auditUserId, auditWorkstation);

            if (resultCode == SystemResponseCode.SUCCESS)
            {
                return true;
            }

            return false;
        }
        public bool UploadPrintBatchToCMS(long printBatchId, int? newPrintBatchStatusesId, List<RequestData> requestdata, string notes, bool autogenerateDistBatch, int languageId, long auditUserId, string auditWorkstation, out string responseMessage)
        {
            var resultCode = _prinbatchDAL.UploadPrintBatchToCMS(printBatchId, newPrintBatchStatusesId, requestdata, autogenerateDistBatch, notes, languageId, auditUserId, auditWorkstation);

            responseMessage = _translator.TranslateResponseCode(resultCode, SystemArea.GENERIC, languageId, auditUserId, auditWorkstation);

            if (resultCode == SystemResponseCode.SUCCESS)
            {
                return true;
            }

            return false;
        }
        public bool UpdatePrintBatchRequestsStatus(long printBatchId, int printBatchStatusesId, bool Successful, List<RequestData> requestdata, List<string> cardstospoil, string notes, int languageId, long auditUserId, string auditWorkstation, out string responseMessage)
        {
            var resultCode = _prinbatchDAL.UpdatePrintBatchRequestsStatus(printBatchId, printBatchStatusesId, Successful, requestdata, cardstospoil, notes, auditUserId, auditWorkstation);

            responseMessage = _translator.TranslateResponseCode(resultCode, SystemArea.GENERIC, languageId, auditUserId, auditWorkstation);

            if (resultCode == SystemResponseCode.SUCCESS)
            {
                return true;
            }

            return false;
        }

        public bool SpoilPrintBatch(long print_batch_id, int? new_print_batch_statuses_id,  string notes, int languageId, 
                                                                       long auditUserId, string auditWorkstation,out string responseMessage)
        {
            List<RequestData> requestData=null;
            var requestlist=GetPrintBatchRequests(print_batch_id, 1, 2000, auditUserId, auditWorkstation);
            foreach(var item in requestlist)
            {
                requestData.Add(new RequestData() { request_id=item.request_id, request_statues_id=item.hybrid_request_statuses_id,card_number=string.Empty });
            }
            var resultCode = _prinbatchDAL.SpoilPrintBatch(print_batch_id, new_print_batch_statuses_id, requestData, notes, languageId, auditUserId, auditWorkstation);

            responseMessage = _translator.TranslateResponseCode(resultCode, SystemArea.GENERIC, languageId, auditUserId, auditWorkstation);

            if (resultCode == SystemResponseCode.SUCCESS)
            {
                return true;
            }

            return false;
        }

        public int GetStockinBranch(int issuerid, int? branchId, int? productId, int? card_issue_method_id,
                                                               long auditUserId, string auditWorkstation)
        {
            return _prinbatchDAL.GetStockinBranch(issuerid, branchId,productId, card_issue_method_id, auditUserId, auditWorkstation);
            }

        public List<PrintBatchResult> GetPrintBatchesForUser(int? issuerId,int? productId, string pinBatchReference, int? pinBatchStatusId, int? branchId, int? cardIssueMethodId,
                                                               DateTime? startDate, DateTime? endDate, int langaugeId, int rowsPerPage, int pageIndex, long auditUserId, string auditWorkstation)
        {
            return _prinbatchDAL.GetPrintBatchesForUser(issuerId, productId, pinBatchReference, pinBatchStatusId, branchId, cardIssueMethodId,
                                                  startDate, endDate, langaugeId, rowsPerPage, pageIndex, auditUserId, auditWorkstation);
        }
        public List<HybridRequestResult> SearchHybridRequestList(int issuerId, int? branchId, int? productId, int? hybridrequeststatusId, string requestreference, int? cardIssueMethodId, bool checkmasking, int languageId, int pageIndex, int rowsPerPage,
                                                                      long auditUserId, string auditWorkstation)
        {
            return _prinbatchDAL.SearchHybridRequestList(issuerId,branchId,productId,hybridrequeststatusId,requestreference,  cardIssueMethodId,
                                                 checkmasking, languageId,  pageIndex, rowsPerPage, auditUserId, auditWorkstation);
        }

        public string[] GetWorkStationKey(string Workstation,int Size)
        {
            string[] _keys = null;
            workstationkeys_result result= _prinbatchDAL.GetWorkStationKey(Workstation);
            if (result == null)
            {
                RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
                byte[] key = new byte[Size]; //128 bit key
                byte[] aData = new byte[90]; // aData

                rng.GetBytes(key);
                rng.GetBytes(aData);
                string strkey = Base64.ToBase64String(key);
                string straData = Base64.ToBase64String(aData);
                _keys = new string[2];
                _keys[0] = strkey;
                _keys[1] = straData;
                if (InsertWorkStationKey(Workstation, strkey, straData))
                    return _keys;

            }
            else
            {
                _keys = new string[2];
                _keys[0] = result.key;
                _keys[1] = result.aData;

            }
            return _keys;
        }

        public bool InsertWorkStationKey(string auditWorkstation, string key,string aData)
        {
            return _prinbatchDAL.InsertWorkStationKey(auditWorkstation, key,aData);
        }
        public List<HybridRequestResult> GetRequestsByPrintBatch(long printBatchId, int startindex, int size, int languageId, long auditUserId, string auditWorkStation)
        {
            return _prinbatchDAL.GetPrintBatchRequests(printBatchId, startindex,  size, languageId, auditUserId, auditWorkStation);
        }
        public List<PrintBatchRequestDetails> GetPrintBatchRequests(long printBatchId, int startindex, int size, long auditUserId, string auditWorkStation)
        {
            CardMangementService _service = new CardMangementService();
            List<PrintBatchRequestDetails> response = new List<PrintBatchRequestDetails>();
            PrintBatchRequestDetails details ;
            var _requestresult=   _prinbatchDAL.GetPrintBatchRequests(printBatchId, startindex, size, 0, auditUserId, auditWorkStation);
           
            foreach (var item in _requestresult)
            {
                details = new PrintBatchRequestDetails();
                details.card_id = item.card_id;
                details.request_id = item.request_id;              
                details.hybrid_request_statuses_id = item.hybrid_request_statuses_id;
                details.request_reference = item.request_reference;
                details.ProductFields=new List<ProductField>();
                details.ProductFields.AddRange(_service.GetProductFields(null, null, item.request_id));
                response.Add(details);

            }
            return response;


        }

        public PrintBatchResult GetPrintBatch(long pinBatchId, int languageId, long auditUserId, string auditWorkstation)
        {
            return _prinbatchDAL.GetPrintBatch(pinBatchId, languageId, auditUserId, auditWorkstation);
        }
        public byte[] GeneratePrintBatchReport(long printBatchId, int languageId, string username, long auditUserId, string auditWorkStation)
        {
            return _distBatchReports.GeneratePrintBatchReport(printBatchId, languageId, username, auditUserId, auditWorkStation);
        }
    }
}
